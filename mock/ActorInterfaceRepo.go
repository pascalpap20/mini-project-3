// Code generated by mockery v2.20.0. DO NOT EDIT.

package mock

import (
	entity "crud/entity"

	mock "github.com/stretchr/testify/mock"
)

// ActorInterfaceRepo is an autogenerated mock type for the ActorInterfaceRepo type
type ActorInterfaceRepo struct {
	mock.Mock
}

// CreateActor provides a mock function with given fields: actor
func (_m *ActorInterfaceRepo) CreateActor(actor *entity.Actor) (*entity.Actor, error) {
	ret := _m.Called(actor)

	var r0 *entity.Actor
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Actor) (*entity.Actor, error)); ok {
		return rf(actor)
	}
	if rf, ok := ret.Get(0).(func(*entity.Actor) *entity.Actor); ok {
		r0 = rf(actor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Actor)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Actor) error); ok {
		r1 = rf(actor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteActorById provides a mock function with given fields: id
func (_m *ActorInterfaceRepo) DeleteActorById(id uint) (entity.Actor, error) {
	ret := _m.Called(id)

	var r0 entity.Actor
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (entity.Actor, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) entity.Actor); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entity.Actor)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActorById provides a mock function with given fields: id
func (_m *ActorInterfaceRepo) GetActorById(id uint) (entity.Actor, error) {
	ret := _m.Called(id)

	var r0 entity.Actor
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (entity.Actor, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) entity.Actor); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entity.Actor)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActors provides a mock function with given fields: username, page
func (_m *ActorInterfaceRepo) GetActors(username string, page uint) ([]entity.Actor, error) {
	ret := _m.Called(username, page)

	var r0 []entity.Actor
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uint) ([]entity.Actor, error)); ok {
		return rf(username, page)
	}
	if rf, ok := ret.Get(0).(func(string, uint) []entity.Actor); ok {
		r0 = rf(username, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Actor)
		}
	}

	if rf, ok := ret.Get(1).(func(string, uint) error); ok {
		r1 = rf(username, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRegisterApproval provides a mock function with given fields:
func (_m *ActorInterfaceRepo) GetRegisterApproval() ([]entity.RegisterApproval, error) {
	ret := _m.Called()

	var r0 []entity.RegisterApproval
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entity.RegisterApproval, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.RegisterApproval); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.RegisterApproval)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: actor
func (_m *ActorInterfaceRepo) Login(actor *entity.Actor) (*entity.Actor, error) {
	ret := _m.Called(actor)

	var r0 *entity.Actor
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Actor) (*entity.Actor, error)); ok {
		return rf(actor)
	}
	if rf, ok := ret.Get(0).(func(*entity.Actor) *entity.Actor); ok {
		r0 = rf(actor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Actor)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Actor) error); ok {
		r1 = rf(actor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: actor
func (_m *ActorInterfaceRepo) Register(actor *entity.Actor) (*entity.Actor, error) {
	ret := _m.Called(actor)

	var r0 *entity.Actor
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Actor) (*entity.Actor, error)); ok {
		return rf(actor)
	}
	if rf, ok := ret.Get(0).(func(*entity.Actor) *entity.Actor); ok {
		r0 = rf(actor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Actor)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Actor) error); ok {
		r1 = rf(actor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetActivateAdminById provides a mock function with given fields: id
func (_m *ActorInterfaceRepo) SetActivateAdminById(id uint) (entity.Actor, error) {
	ret := _m.Called(id)

	var r0 entity.Actor
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (entity.Actor, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) entity.Actor); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entity.Actor)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetDeactivateAdminById provides a mock function with given fields: id
func (_m *ActorInterfaceRepo) SetDeactivateAdminById(id uint) (entity.Actor, error) {
	ret := _m.Called(id)

	var r0 entity.Actor
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (entity.Actor, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) entity.Actor); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entity.Actor)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateActorById provides a mock function with given fields: actor, id
func (_m *ActorInterfaceRepo) UpdateActorById(actor *entity.Actor, id uint) (*entity.Actor, error) {
	ret := _m.Called(actor, id)

	var r0 *entity.Actor
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Actor, uint) (*entity.Actor, error)); ok {
		return rf(actor, id)
	}
	if rf, ok := ret.Get(0).(func(*entity.Actor, uint) *entity.Actor); ok {
		r0 = rf(actor, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Actor)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Actor, uint) error); ok {
		r1 = rf(actor, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRegisterApprovalStatusById provides a mock function with given fields: reg, id
func (_m *ActorInterfaceRepo) UpdateRegisterApprovalStatusById(reg *entity.RegisterApproval, id uint) (*entity.RegisterApproval, error) {
	ret := _m.Called(reg, id)

	var r0 *entity.RegisterApproval
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.RegisterApproval, uint) (*entity.RegisterApproval, error)); ok {
		return rf(reg, id)
	}
	if rf, ok := ret.Get(0).(func(*entity.RegisterApproval, uint) *entity.RegisterApproval); ok {
		r0 = rf(reg, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.RegisterApproval)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.RegisterApproval, uint) error); ok {
		r1 = rf(reg, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewActorInterfaceRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewActorInterfaceRepo creates a new instance of ActorInterfaceRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewActorInterfaceRepo(t mockConstructorTestingTNewActorInterfaceRepo) *ActorInterfaceRepo {
	mock := &ActorInterfaceRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
